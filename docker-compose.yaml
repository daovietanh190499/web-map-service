networks:
  wms-network:
    driver: "bridge"

services:
  wms-registry:
    image: registry:2
    restart: always
    environment:
      REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data
    ports:
      - 5000:5000
    expose:
      - 5000
    volumes:
      - ./wms_data/docker_registry:/data
    networks:
    - wms-network

  wms-db:
    image: postgis/postgis:13-3.1
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_MULTIPLE_EXTENSIONS: postgis,hstore,postgis_topology,postgis_raster,pgrouting
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - ./wms_data/postgis/data:/var/lib/postgresql/data
      - ./wms_data/postgis/st_geometry.so:/usr/lib/postgresql/13/lib/st_geometry.so
    networks:
    - wms-network

  wms-celery: &backend
    build:
      context: wms_project
      dockerfile: Dockerfile
    restart: always
    environment:
      SECRET_KEY: 'django-insecure-w7z4a$-zclzww3izii@a(53%_1i9gfg^y)k2ban+e0h!)d'
      DB_ENGINE: ${DB_ENGINE}
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_PORT: ${PGPORT}
      DB_HOST: ${DB_HOST}
      AWS_ACCESS_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_BUCKET_NAME: "wms_images"
      AWS_S3_ENDPOINT: ${AWS_S3_ENDPOINT}
      ELASTICSEARCH_HOST: ${ELASTICSEARCH_HOST}
      REDIS_HOST: ""
    command: [
      "/bin/bash",
      "-c",
      "sleep 10 && python -m celery -A wms_project worker --loglevel info"
    ]
    volumes:
      - ./wms_data/wms_data/data:/mnt/data
    networks:
    - wms-network

  wms-backend:
    << : *backend
    restart: always
    ports:
      - 80:8000
    expose:
      - 80
    volumes:
      - ./wms_data/wms_data/static:/mnt/static
      - ./wms_data/wms_data/data:/mnt/data
      - ./wms_project:/home/wms
    # command: [
    #   "/bin/bash",
    #   "-c",
    #   "sleep 10 && python3 manage.py collectstatic --no-input --clear && python3 manage.py makemigrations && python3 manage.py migrate && gunicorn wms_project.wsgi:application --bind 0.0.0.0:8000"
    # ]
    command: [
      "/bin/bash",
      "-c",
      "sleep infinity"
    ]
    depends_on:
    - wms-db
    networks:
    - wms-network

  wms-minio:
    image: quay.io/minio/minio
    restart: always
    command: server /data --console-address ":9001"
    ports:
      - 9000:9000
      - 9001:9001
    expose:
      - 9000
      - 9001
    environment:
      MINIO_ROOT_USER: "wms-minio"
      MINIO_ROOT_PASSWORD: "wms-minio-123!@"
    volumes:
      - ./wms_data/minio:/data
    networks:
    - wms-network
  
  wms-elasticsearch:
    image: opensearchproject/opensearch:latest
    restart: always
    environment:
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: "elastic12!@"
      bootstrap.memory_lock: "true"
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
    ports:
      - 9200:9200
      - 9600:9600
    expose:
      - 9200
      - 9600
    networks:
    - wms-network
    volumes:
    - ./wms_data/opensearch:/usr/share/opensearch/data

  wms-elasticsearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest
    restart: always
    ports:
      - 5601:5601
    expose:
      - 5601
    environment:
      OPENSEARCH_HOSTS: '["https://wms-elasticsearch:9200"]'
    networks:
      - wms-network

  wms-redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - 6379:6379
    expose:
      - 6379
    command: redis-server --save 20 1 /etc/redis/redis.conf
    volumes:
      - ./wms_data/redis/data:/data
      - ./wms_data/redis/redis.conf:/etc/redis/redis.conf
